options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: iiotest
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'True'
    comment: ''
    file: /home/jiangrd3/code/lora_test/save_test
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 596.0]
    rotation: 0
    state: disabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("NEXT")
    period: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 240.0]
    rotation: 0
    state: disabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: complex
    vlen: 8192*2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 488.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ zmq,time\ntextboxValue = \"\"\n\nclass my_sync_block(gr.sync_block):\n   \
      \ \"\"\"\n    reads input from a message port\n    outputs text\n    \"\"\"\n\
      \    def __init__(self,delay=10):\n        gr.sync_block.__init__(self,\n  \
      \          name = \"LoRa Source\",\n            in_sig = None,\n           \
      \ out_sig = [np.complex64],\n            )\n        file_name = '/home/jiangrd3/code/lora_test/dataset/'\n\
      \        self.set_output_multiple(8192)\n        self.label_t = np.load(file_name+'label.npy')\n\
      \        self.data_t = np.load(file_name+'data.npy')\n        a, self.b =  self.data_t.shape\n\
      \        print('Opened')\n        self.delay = delay\n        self.count = 0\n\
      \        self.max = self.label_t.shape[1]\n        print(\"label shape:\", self.label_t.shape,\
      \ \"max:\", self.max)\n        # \u521D\u59CB\u5316ZMQ\n        self.context\
      \ = zmq.Context()\n\n        self.last_send_time = time.time()\n        self.ready_to_read\
      \ = False\n        self.reread = False\n        self.replay = 0\n        self.message_port_register_in(pmt.intern(\"\
      trigger\"))\n        self.set_msg_handler(pmt.intern(\"trigger\"), self.handle_trigger)\n\
      \        self.trig_mark = False\n    def work(self, input_items, output_items):\n\
      \        if time.time()-self.last_send_time>self.delay:\n\n            print(f\"\
      {time.time()-self.last_send_time} s since last send\")\n            if self.count\
      \ is None or self.max is None:\n                print(\"[ERROR] self.count or\
      \ self.max is None!\")\n                return -1\n            \n          \
      \  # \u8F6C\u6362\u6570\u636E\u5E76\u8F93\u51FA\n            if self.ready_to_read:\n\
      \                samples = self.data_t[self.count, :self.b//2]+1j*self.data_t[self.count,\
      \ self.b//2:]\n                #for x in range(8192):\n                #   \
      \ output_items[0][x] = samples[x]\n                output_items[0][:8192] =\
      \ samples[:8192]\n                #output_items[0][:8192] = np.array(samples)\n\
      \                self.ready_to_read = False\n                self.reread = False\n\
      \                # print(f\"\u5DF2\u53D1\u9001\u4E00\u4E2A\u6CE2\u5F62\uFF0C\
      \u957F\u5EA6: {len(samples)} \u4E2A\u6837\u672C\")\n                self.count\
      \ = self.count+1\n                self.replay = 0\n                self.last_send_time\
      \ = time.time()\n                print(f'Next wave: {self.count}')\n       \
      \         self.trig_mark = False\n                return 8192\n            \n\
      \            if self.reread:\n                self.reread = False\n        \
      \        samples = self.data_t[self.count, :self.b//2]+1j*self.data_t[self.count,\
      \ self.b//2:]\n\n                output_items[0][:8192] = samples[:8192]\n \
      \               self.ready_to_read = False\n                self.last_send_time\
      \ = time.time()\n                print(f'Replay wave: {self.replay}')\n    \
      \            self.replay += 1\n                # print(f\"\u5DF2\u53D1\u9001\
      \u4E00\u4E2A\u6CE2\u5F62\uFF0C\u957F\u5EA6: {len(samples)} \u4E2A\u6837\u672C\
      \")\n                return 8192\n            \n            if self.count >=\
      \ self.max:\n                print(\"\u5DF2\u5230\u8FBE\u6587\u4EF6\u672B\u5C3E\
      \")\n                return -1\n        else:\n            output_items[0][:8192]\
      \ = np.zeros(8192, dtype=np.complex64)\n            # self.last_send_time =\
      \ time.time()\n            return 8192\n\n    def stop(self):\n        if hasattr(self,\
      \ 'file') and self.file:\n            self.file.close()\n        if hasattr(self,\
      \ 'socket'):\n            self.socket.close()\n        if hasattr(self, 'context'):\n\
      \            self.context.term()\n        return True\n    \n    def handle_trigger(self,\
      \ msg):\n        if not self.trig_mark:\n            msg = pmt.symbol_to_string(msg)\n\
      \            if msg == \"NEXT\":\n                # print(msg)\n           \
      \     self.ready_to_read = True\n                self.reread = False\n     \
      \           self.trig_mark = True\n                # print(\"\u6536\u5230\u6D88\
      \u606F\u7AEF\u53E3\u89E6\u53D1\u4FE1\u53F7\uFF0C\u51C6\u5907\u8BFB\u53D6\u4E0B\
      \u4E00\u4E2A\u6CE2\u5F62\")\n            if msg == \"REPLAY\":\n           \
      \     # print(msg)\n                self.reread = True\n                self.ready_to_read\
      \ = False\n            "
    affinity: ''
    alias: ''
    comment: ''
    delay: '0.3'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('LoRa Source', 'my_sync_block', [('delay', '10')], [('trigger', 'message',
      1)], [('0', 'complex', 1)], '\n    reads input from a message port\n    outputs
      text\n    ', ['delay'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 248.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ time\nimport matplotlib.pyplot as plt\n\nclass LoRaPreambleDetector(gr.sync_block):\n\
      \    \"\"\"\n    LoRa \u524D\u5BFC\u68C0\u6D4B\u5668\uFF08\u7F13\u51B2 + \u5206\
      \u6BB5\u80FD\u91CF\u68C0\u6D4B\uFF09\n    \"\"\"\n    def __init__(self, sample_rate=1e6,\
      \ bandwidth=125e3,\n                 sf=7, preamble_symbols=8,\n           \
      \      energy_window=128, energy_threshold_factor=0.5,\n                 step_size=256,save_path='./'):\n\
      \        gr.sync_block.__init__(\n            self,\n            name=\"LoRa\
      \ Preamble Detector\",\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n        # LoRa \u53C2\u6570\n        self.sample_rate = sample_rate\n\
      \        self.bandwidth = bandwidth\n        self.sf = sf\n        self.symbol_len\
      \ = int(2**sf * sample_rate / bandwidth)\n        self.preamble_len = preamble_symbols\
      \ * self.symbol_len\n        self.save_path = save_path\n        # \u80FD\u91CF\
      \u68C0\u6D4B\u53C2\u6570\n        self.energy_window = energy_window\n     \
      \   self.energy_threshold_factor = energy_threshold_factor\n        \n     \
      \   self.step_size = step_size\n\n        # \u8F93\u51FA\u957F\u5EA6\u63A7\u5236\
      \n        self.set_output_multiple(4096*5)  # \u6BCF\u6B21\u5904\u7406\u957F\
      \u5EA6\uFF0C\u4FDD\u8BC1work\u5FEB\n\n        # \u7F13\u51B2\u533A\n       \
      \ self.buffer = np.zeros(0, dtype=np.complex64)\n\n        # \u6D88\u606F\u7AEF\
      \u53E3\n        self.message_port_register_out(pmt.intern(\"trigger\"))\n\n\
      \        print(f\"LoRaPreambleDetector \u521D\u59CB\u5316\u5B8C\u6210\")\n \
      \       print(f\"\u7B26\u53F7\u957F\u5EA6: {self.symbol_len}, \u524D\u5BFC\u957F\
      \u5EA6: {self.preamble_len}\")\n\n    def work(self, input_items, output_items):\n\
      \        in0 = input_items[0]\n        out = output_items[0]\n\n        # 1.\
      \ \u7D2F\u79EF\u6570\u636E\u5230\u7F13\u5B58\n        self.buffer = np.concatenate([self.buffer,\
      \ in0])\n        consumed = len(in0)   # \u8F93\u5165\u90FD\u8981\u6D88\u8D39\
      \u6389\n\n        # 2. \u5982\u679C\u7F13\u5B58\u4E0D\u591F\uFF0C\u5C31\u5148\
      \u8FD4\u56DE\n        if len(self.buffer) < self.preamble_len:\n           \
      \ return consumed\n\n        # 3. \u80FD\u91CF\u8BA1\u7B97\n        segment\
      \ = self.buffer\n        energy = np.convolve(np.abs(segment)**2, np.ones(self.energy_window),\
      \ 'valid')\n        \n        noise_floor = np.mean(energy)   # \u6539\u6210\
      \u5747\u503C\n        threshold = max(noise_floor * self.energy_threshold_factor,\
      \ 1e-3)\n        # print(threshold)\n        # 4. \u4E0A\u5347\u6CBF\u68C0\u6D4B\
      \n        diff_energy = np.diff(energy)\n        rise_edges = np.where((diff_energy\
      \ > 1e-3) & (energy[1:] > threshold))[0]\n\n        if len(rise_edges) > 0:\n\
      \            # np.save(f'{time.time()}.npy', energy)\n            start_idx\
      \ = rise_edges[0]\n            if start_idx + self.preamble_len+self.energy_window//2\
      \ <= (len(segment)) :\n                # print('dddddd')\n                preamble_segment\
      \ = segment[start_idx+ self.energy_window//2:start_idx+self.preamble_len+self.energy_window//2].copy()\n\
      \                # np.save(f'{time.time()}.npy', energy)\n                #\
      \ \u8F93\u51FA preamble\n                out_len = min(len(out), len(preamble_segment))\n\
      \                out[:out_len] = preamble_segment[:out_len]\n              \
      \  # print(len(preamble_segment))\n                # \u53D1\u9001\u89E6\u53D1\
      \u6D88\u606F\n                self.message_port_pub(pmt.intern(\"trigger\"),\
      \ pmt.intern(\"NEXT\"))\n                np.save(self.save_path+f'{time.time()}.npy',\
      \ preamble_segment)\n                # \u4E22\u6389\u5DF2\u5904\u7406\u6570\u636E\
      \n                self.buffer = self.buffer[start_idx + self.preamble_len:]\n\
      \                return consumed\n\n        # 5. \u5982\u679C\u6CA1\u68C0\u6D4B\
      \u5230\uFF0C\u5C31\u4FDD\u7559 buffer\uFF0C\u53EA\u6D88\u8D39\u8F93\u5165\n\
      \        if len(self.buffer) > 10 * self.preamble_len:\n            # \u9632\
      \u6B62\u65E0\u9650\u5806\u79EF\n            self.buffer = self.buffer[-10 *\
      \ self.preamble_len:]\n            self.message_port_pub(pmt.intern(\"trigger\"\
      ), pmt.intern(\"REPLAY\"))\n        return consumed\n\n"
    affinity: ''
    alias: ''
    bandwidth: '125000.0'
    comment: ''
    energy_threshold_factor: '1'
    energy_window: '128'
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble_symbols: '8'
    sample_rate: '1000000.0'
    save_path: '''./'''
    sf: '7'
    step_size: '64'
  states:
    _io_cache: "('LoRa Preamble Detector', 'LoRaPreambleDetector', [('sample_rate',\
      \ '1000000.0'), ('bandwidth', '125000.0'), ('sf', '7'), ('preamble_symbols',\
      \ '8'), ('energy_window', '128'), ('energy_threshold_factor', '0.5'), ('step_size',\
      \ '256'), ('save_path', \"'./'\")], [('0', 'complex', 1)], [('0', 'complex',\
      \ 1), ('trigger', 'message', 1)], '\\n    LoRa \u524D\u5BFC\u68C0\u6D4B\u5668\
      \uFF08\u7F13\u51B2 + \u5206\u6BB5\u80FD\u91CF\u68C0\u6D4B\uFF09\\n    ', ['bandwidth',\
      \ 'energy_threshold_factor', 'energy_window', 'sample_rate', 'save_path', 'sf',\
      \ 'step_size'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 312.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import time\nimport threading\nfrom gnuradio import gr\nimport\
      \ pmt\n\nclass message_strobe(gr.basic_block):\n    \"\"\"\n    Python\u5B9E\
      \u73B0\u7684Message Strobe Block\n    \u5B9A\u65F6\u5411\u6D88\u606F\u7AEF\u53E3\
      \u53D1\u9001\u5B57\u7B26\u4E32\n    \"\"\"\n    def __init__(self, period=0.1,\
      \ msg=\"REPLAY\"):\n        gr.basic_block.__init__(\n            self,\n  \
      \          name=\"Python Message Strobe\",\n            in_sig=None,\n     \
      \       out_sig=None\n        )\n        self.period = period\n        self.msg\
      \ = msg\n        self.message_port_register_out(pmt.intern(\"strobe\"))\n  \
      \      self._stop_event = threading.Event()\n        self._thread = threading.Thread(target=self._strobe_loop)\n\
      \        self._thread.daemon = True\n        self._thread.start()\n\n    def\
      \ _strobe_loop(self):\n        while not self._stop_event.is_set():\n      \
      \      self.message_port_pub(pmt.intern(\"strobe\"), pmt.intern(self.msg))\n\
      \            time.sleep(self.period)\n\n    def stop(self):\n        self._stop_event.set()\n\
      \        self._thread.join()\n        return True"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: '"Next"'
    period: '1'
  states:
    _io_cache: "('Python Message Strobe', 'message_strobe', [('period', '0.1'), ('msg',\
      \ \"'REPLAY'\")], [], [('strobe', 'message', 1)], '\\n    Python\u5B9E\u73B0\
      \u7684Message Strobe Block\\n    \u5B9A\u65F6\u5411\u6D88\u606F\u7AEF\u53E3\u53D1\
      \u9001\u5B57\u7B26\u4E32\\n    ', ['msg', 'period'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 104.0]
    rotation: 0
    state: disabled
- name: osmosdr_sink_0
  id: osmosdr_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '30'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    freq0: 868e6
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '50'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    if_gain0: '30'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 48.0]
    rotation: 0
    state: enabled
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: 868e6
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '10'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 772.0]
    rotation: 0
    state: disabled
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '8192'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"detect"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 444.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '8192'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"sent"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 252.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0_1
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '8192'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"usrp in"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 580.0]
    rotation: 0
    state: disabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 868e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: ''
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 84.0]
    rotation: 0
    state: disabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 868e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 508.0]
    rotation: 0
    state: enabled

connections:
- [blocks_message_strobe_0, strobe, epy_block_0, trigger]
- [blocks_stream_to_vector_0, '0', epy_block_1, '0']
- [epy_block_0, '0', osmosdr_sink_0, '0']
- [epy_block_0, '0', qtgui_sink_x_0_0, '0']
- [epy_block_0, '0', uhd_usrp_sink_0, '0']
- [epy_block_1, '0', blocks_file_sink_0, '0']
- [epy_block_1, '0', qtgui_sink_x_0, '0']
- [epy_block_1, trigger, epy_block_0, trigger]
- [epy_block_2, strobe, epy_block_0, trigger]
- [osmosdr_source_0, '0', epy_block_1, '0']
- [uhd_usrp_source_0, '0', blocks_stream_to_vector_0, '0']
- [uhd_usrp_source_0, '0', epy_block_1, '0']
- [uhd_usrp_source_0, '0', qtgui_sink_x_0_1, '0']

metadata:
  file_format: 1
  grc_version: 3.10.5.1
